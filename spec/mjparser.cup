package rs.ac.bg.etf.pp1.pd110349d;

import java_cup.runtime.*;
import org.apache.log4j.*;

//import java.io.*;


parser code
{:
	Logger log = Logger.getLogger(getClass());
   
   	boolean mainEntered = false, inClass = false;
	
	int nestingDepth = 0;
   
   
    // slede redefinisani metodi za prijavu gresaka radi izmene teksta poruke
     
    public void report_fatal_error(String message, Object info) throws java.lang.Exception {
      done_parsing();
      report_error(message, info);
    }
  
    public void syntax_error(Symbol cur_token) {
        report_error("\nSintaksna greska", cur_token);
    }
  
    public void unrecovered_syntax_error(Symbol cur_token) throws java.lang.Exception {
        report_fatal_error("Fatalna greska, parsiranje se ne moze nastaviti", cur_token);
    }

    public void report_error(String message, Object info) {
    	StringBuilder msg = new StringBuilder(message); 
    	if (info instanceof Symbol)
            msg.append (" na liniji ").append(((Symbol)info).left);
        log.error(msg.toString());
    }
:}

scan with
{:
	Symbol s = this.getScanner().next_token();
	if (s != null && s.value != null) 
	{
		log.info(s.toString() + " " + s.value.toString());
		
		if(s.value.toString().equals("main")) mainEntered = true;
		
		if(s.value.toString().equals("class"))
		{
			if(!inClass) inClass = true;
			else nestingDepth++;
		}
	}
	
	return s;
:}

action code
{:
	int globalVarCount = 0, localVarCount = 0, globalConstCount = 0, globalArrayCount = 0;
	
	int mainFuncDefCnt = -1, statementBlockCnt = 0, mainFuncCall = 0, formArgDecl = 0;
	
	int nestedClassDefCnt = 0, nestedMethodDefCnt = 0, nestedFieldDefCnt = 0;
	
:}

terminal PROG, ASSIGN, COMMA, SEMI, CLASS, EXTENDS, CONST, VOID, WHILE, BREAK ;

terminal RETURN, READ, PRINT, IF, ELSE, INC, DEC, LOG_OR, LOG_AND, NEW, DOT ;

// PARENTHESES
terminal L_CURLY, R_CURLY, L_BRACKET, R_BRACKET, L_PAREN, R_PAREN ;

// RELATION OPERATORS
terminal EQUAL, N_EQUAL, GR_THAN, GR_EQ_THAN, LE_THAN, LE_EQ_THAN ;

// ADD OPERATORS
terminal PLUS, MINUS ;

// MULL OPERATORS
terminal MUL, DIV, MOD ;

// IDENT
terminal String IDENT ;

//NUM
terminal Integer NUM;

// CONSTANTS
terminal Character CHAR_CONST ;
terminal Boolean BOOL_CONST ;
terminal String STR_CONST ;

// Program
non terminal Program ;
non terminal FieldDeclList, FieldDecl, ConstDecl, VarDecl, ClassDecl ;
non terminal MethodDeclList, MethodDecl ;

// ConstDecl
non terminal ConstValList, ConstVal ;

// VarDecl
non terminal VarList, Var, Array, Brackets ;

// ClassDecl
non terminal OptionalExtends, VarDeclList, OptionalMethodDeclList ;

// MethodDecl
non terminal TypeOrVoid, OptionalFormPars, StatementList, FormPars, Statement ;

// FormPars

// Type
non terminal Type ;

// Statement
non terminal Designator, Group1, Condition, OptExpr, OptNum ;
non terminal Expr, OptActPars, ActPars, Matched, Unmatched ;

// ActPars
non terminal AditionalExprList ;

// Condition
non terminal CondTerm, AditionalCondTermList ;

// CondTerm
non terminal CondFact, AditionalCondFactList ;

// CondFact
non terminal OptRelExpr, Relop ;

// Expr
non terminal OptMinus, Term, AddTermList, Addop ;

// Term
non terminal Factor, MulFactorList, Mulop ;

// Factor
non terminal OptDesPars, OptBracketExpr ;

// Designator
non terminal Group2List, Group2 ;

// Relop

// Addop

// Mulop


//Program
Program ::= PROG IDENT FieldDeclList L_CURLY MethodDeclList R_CURLY ;

FieldDeclList ::= FieldDeclList FieldDecl
					|
					/* epsilon */
					;

FieldDecl ::= ConstDecl | VarDecl | ClassDecl ;

MethodDeclList ::= MethodDeclList MethodDecl
					|
					/* epsilon */
					;

// ConstDecl
ConstDecl ::= CONST Type ConstValList SEMI 
				{:
					if(!parser.mainEntered)globalConstCount++;
					else if(parser.nestingDepth > 0) nestedFieldDefCnt++;
				:}
				;

ConstValList ::= ConstValList COMMA ConstVal
			|
			IDENT ASSIGN ConstVal
			;
			
ConstVal ::= NUM | CHAR_CONST | BOOL_CONST | STR_CONST;

// VarDecl
VarDecl ::= Type VarList SEMI ;

VarList ::= VarList COMMA Var
			|
			Var
			|
			Array
			;
			
Var ::= IDENT
	{: 
		if(!parser.mainEntered) globalVarCount++;
		else if(!parser.inClass) localVarCount++;
			else if(parser.nestingDepth > 0) nestedFieldDefCnt++;
	:} 
	;

Array ::= IDENT Brackets
			{:
				if(!parser.mainEntered)globalArrayCount++;
				else if(parser.nestingDepth > 0) nestedFieldDefCnt++;
			:}
			;

Brackets ::= L_BRACKET R_BRACKET ;	

// ClassDecl
ClassDecl ::= CLASS IDENT OptionalExtends L_CURLY VarDeclList OptionalMethodDeclList R_CURLY
				{:
					if(parser.nestingDepth > 0)
					{
						parser.nestingDepth--;
						nestedClassDefCnt++;	
					}
					else parser.inClass = false;
				:}
				;	
				
OptionalExtends ::= EXTENDS Type
					|
					/* epsilon */
					;
					
VarDeclList ::= VarDeclList VarDecl
				|
				/* epsilon */
				;	  
			  
OptionalMethodDeclList ::= L_CURLY MethodDeclList R_CURLY
							|
							/* epsilon */
							;
					
// MethodDecl
MethodDecl ::= TypeOrVoid IDENT L_PAREN OptionalFormPars R_PAREN
				VarDeclList L_CURLY StatementList R_CURLY
				{:
					if(parser.mainEntered && !parser.inClass) mainFuncDefCnt++;
					else if(parser.nestingDepth > 0) nestedMethodDefCnt++;
				:}
				;
				
TypeOrVoid ::= Type
				|
				VOID
				;
				
OptionalFormPars ::= FormPars
						|
						/* epsilon */
						;
						
StatementList ::= StatementList Statement
					|
					/* epsilon */
					;
					
// FormPars
FormPars ::= FormPars COMMA Type Var
				|
				Type Var
				{:
				formArgDecl++;
				globalVarCount--;
				:}
				;

// Type
Type ::= IDENT;

// Statement
Statement ::= Matched | Unmatched ;

Unmatched ::= IF L_PAREN Condition R_PAREN Statement
				|
				IF L_PAREN Condition R_PAREN Matched ELSE Unmatched
				|
				WHILE L_PAREN Condition R_PAREN Unmatched
				;

Matched ::= Designator Group1 SEMI
				|
				IF L_PAREN Condition R_PAREN Matched ELSE Matched
				|
				WHILE L_PAREN Condition R_PAREN Matched
				|
				BREAK SEMI
				|
				RETURN OptExpr SEMI
				|
				READ L_PAREN Designator R_PAREN SEMI
				|
				PRINT L_PAREN Expr OptNum R_PAREN SEMI
				|
				L_CURLY StatementList R_CURLY
				{: statementBlockCnt++; :}
				;
			  
Group1 ::= ASSIGN Expr 
					|
					L_PAREN OptActPars R_PAREN
					{: mainFuncCall++ ; :}
					|
					INC
					|
					DEC
					;

OptActPars ::= ActPars
				|
				/* epsilon */
				;
			
OptExpr ::= Expr
			|
			/* epsilon */
			;
			
OptNum ::= NUM
			|
			/* epsilon */
			;					
		
// ActPars		
ActPars ::= Expr AditionalExprList;

AditionalExprList ::= AditionalExprList COMMA Expr
						|
						/* epsilon */
						;
						
// Condition
Condition ::= CondTerm AditionalCondTermList;

AditionalCondTermList ::= AditionalCondTermList LOG_OR CondTerm
							|
							/* epsilon */
							;	  

// CondTerm
CondTerm ::= CondFact AditionalCondFactList;

AditionalCondFactList ::= AditionalCondFactList LOG_AND	CondFact
							|
							/* epsilon */
							;		  
			  
// CondFact
CondFact ::= Expr OptRelExpr;

OptRelExpr ::= Relop Expr
				|
				/* epsilon */
				;

// Expr
Expr ::= OptMinus Term AddTermList;

OptMinus ::= MINUS
				|
				/* epsilon */
				;

AddTermList ::= AddTermList Addop Term
				|
				/* epsilon */
				;
								
// Term
Term ::= Factor MulFactorList;

MulFactorList ::= MulFactorList Mulop Factor
					|
					/* epsilon */
					;
					
// Factor
Factor ::= Designator OptDesPars
			|
			NUM
			|
			CHAR_CONST
			|
			STR_CONST
			|
			NEW Type OptBracketExpr
			|
			L_PAREN Expr R_PAREN
			;

OptBracketExpr ::= L_BRACKET Expr R_BRACKET
					|
					/* epsilon */
					;

OptDesPars ::= L_PAREN OptActPars R_PAREN
				|
				/* epsilon */
				;					
			  
// Designator
Designator ::= IDENT Group2List;

Group2List ::= Group2List Group2
				|
				/* epsilon */
				;
				
Group2 ::= DOT IDENT
			|
			L_BRACKET Expr R_BRACKET
			;
			
// Relop
Relop ::= EQUAL
			|
			N_EQUAL
			|
			GR_THAN
			|
			GR_EQ_THAN
			|
			LE_THAN
			|
			LE_EQ_THAN
			;
			
// Addop
Addop ::= PLUS
			|
			MINUS
			;
			
// Mulop
Mulop ::= MUL
			|
			DIV
			|
			MOD
			;			
			  
			  
			  
			  
			  
			  
			  
			  
			  
			  
			  
			  
			  
			  
			  
			  
			  
			  