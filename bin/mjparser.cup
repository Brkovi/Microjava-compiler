package rs.ac.bg.etf.pp1.pd110349d;

import java_cup.runtime.*;
import org.apache.log4j.*;

// import java.io.*;


parser code {:
	
	int printCallCount = 0;
	
	Logger log = Logger.getLogger(getClass());
   
   
    // slede redefinisani metodi za prijavu gresaka radi izmene teksta poruke
     
    public void report_fatal_error(String message, Object info) throws java.lang.Exception {
      done_parsing();
      report_error(message, info);
    }
  
    public void syntax_error(Symbol cur_token) {
        report_error("\nSintaksna greska", cur_token);
    }
  
    public void unrecovered_syntax_error(Symbol cur_token) throws java.lang.Exception {
        report_fatal_error("Fatalna greska, parsiranje se ne moze nastaviti", cur_token);
    }

    public void report_error(String message, Object info) {
    	StringBuilder msg = new StringBuilder(message); 
    	if (info instanceof Symbol)
            msg.append (" na liniji ").append(((Symbol)info).left);
        log.error(msg.toString());
    }
:}

scan with {:
	Symbol s = this.getScanner().next_token();
	if (s != null && s.value != null) 
		log.info(s.toString() + " " + s.value.toString());
	return s;
:}

terminal PROG, L_CURLY, R_CURLY, ASSIGN, COMMA ;

terminal String IDENT ;

terminal Character CHAR_CONST ;
terminal Boolean BOOL_CONST ;
terminal String STR_CONST ;

// Program
non terminal Program ;
non terminal FieldDeclList, FieldDecl, ConstDecl, VarDecl, ClassDecl ;
non terminal MethodDeclList ;

// ConstDecl
non terminal ConstValList, ConstVal ;


//Program
Program ::= PROG IDENT FieldDeclList L_CURLY MethodDeclList R_CURLY ;

FieldDeclList ::= FieldDeclList FieldDecl
					|
					/* epsilon */
					;

FieldDecl ::= ConstDecl | VarDecl | ClassDecl ;

MethodDeclList ::= MethodDeclList MethodDecl
					|
					/* epsilon */
					;

// ConstDecl
ConstDecl ::= CONST Type IDENT ASSIGN ConstValList SEMI ;

ConstValList ::= ConstValList COMMA ConstVal
			|
			ConstVal
			;
			
ConstVal ::= NUM | CHAR_CONST | BOOL_CONST | STR_CONST;

// VarDecl
VarDecl ::= Type VarList SEMI ;

VarList ::= VarList COMMA Var
			|
			Var
			;
			
Var ::= IDENT OptionalBrackets ;

// OptionalBrackets
OptionalBrackets ::= L_BRACKET R_BRACKET
						|
						/* epsilon */
						;		

// ClassDecl
ClassDecl ::= CLASS IDENT OptionalExtends L_CURLY 
				VarDeclList OptionalMethodDeclList R_CURLY ;	
				
OptionalExtends ::= EXTENDS Type
					|
					/* epsilon */
					;
					
VarDeclList ::= VarDeclList VarDecl
				|
				/* epsilon */
				;	  
			  
OptionalMethodDeclList ::= L_CURLY MethodDeclList RCURLY
							|
							/* epsilon */
							;
					
// MethodDecl
MethodDecl ::= TypeOrVoid IDENT L_PAREN OptionalFormPars R_PAREN
				VarDeclList L_CURLY StatementList R_CURLY;
				
TypeOrVoid ::= Type
				|
				VOID
				;
				
OptionalFormPars ::= FormPars
						|
						/* epsilon */
						;
						
StatementList ::= StatementList Statement
					|
					/* epsilon */
					;
					
// FormPars
FormPars ::= Type VarList ;

// Type
Type ::= IDENT;

// Statement
Statement ::= Designator ASSIGN 	  
			  
			  
			  
			  
			  
			  
			  
			  
			  
			  
			  
			  